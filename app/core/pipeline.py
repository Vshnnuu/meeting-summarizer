from datetime import datetime
from .prompt import SUMMARY_PROMPT
from .llm import call_llm_json
from .parse import coerce_json
from .models import MeetingResult, ActionItem


def summarize_and_extract(title: str, transcript: str) -> MeetingResult:
    """
    Single-step optimized summarization:
    - Sends the entire transcript to the LLM once (no chunk loop)
    - Uses structured JSON prompt (from prompt.py)
    - Returns a fully populated MeetingResult object
    - Fast: 10‚Äì15s typical latency
    """
    print("DEBUG transcript being sent to LLM (first 500 chars):", transcript[:500])

    # ‚úÖ Build the complete structured prompt
    full_prompt = SUMMARY_PROMPT + transcript

    # üöÄ Call LLM once
    raw = call_llm_json(full_prompt)
    data = coerce_json(raw)

    # ‚úÖ Extract structured fields safely
    summary = data.get("summary", "").strip()
    decisions = data.get("decisions") or []
    action_items_raw = data.get("action_items") or []
    important_dates = data.get("important_dates") or []
    other_notes = data.get("other_notes") or []

    # ‚úÖ Normalize action items
    action_items = []
    for ai in action_items_raw:
        if isinstance(ai, dict) and ai.get("task"):
            action_items.append(
                ActionItem(
                    assignee=ai.get("assignee") or "Unassigned",
                    task=ai.get("task"),
                    due_date=ai.get("due_date") or "‚Äî",
                )
            )

    # ‚úÖ Fallbacks if model output is incomplete
    if not summary:
        summary = "‚ö†Ô∏è No summary was generated by the model."
    if not isinstance(decisions, list):
        decisions = [str(decisions)]

    # ‚úÖ Create the MeetingResult instance
    result = MeetingResult(
        title=title or "Untitled Meeting",
        transcript=transcript,
        summary=summary,
        decisions=decisions,
        action_items=action_items,
        important_dates=important_dates,
        other_notes=other_notes,
        created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    )

    print("‚úÖ summarize_and_extract() completed successfully.")
    return result
